import droid.*;
import battle.*;
import weapon.*;
import arena.Arena;
import util.ColorConsole;

import java.util.*;
import java.io.*;

public class Main {
    private static List<Droid> droids = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static List<Arena> arenas = Arrays.asList(
            new Arena("–ü—É—Å—Ç–µ–ª—è", "–ó–º–µ–Ω—à—É—î —Ç–æ—á–Ω—ñ—Å—Ç—å –Ω–∞ 10%"),
            new Arena("–ú—ñ—Å—Ç–æ", "–ó–±—ñ–ª—å—à—É—î —à–∫–æ–¥—É –Ω–∞ 15%"),
            new Arena("–õ—ñ—Å", "–ó–±—ñ–ª—å—à—É—î —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –µ–Ω–µ—Ä–≥—ñ—ó")
    );

    public static void main(String[] args) {
        System.out.println(ColorConsole.CYAN + "üéÆ –õ–ê–°–ö–ê–í–û –ü–†–û–°–ò–ú–û –î–û –ë–ò–¢–í–ò –î–†–û–á–î–Ü–í! üéÆ" + ColorConsole.RESET);

        while (true) {
            printMenu();
            int choice = scanner.nextInt();
            scanner.nextLine(); // —Å–ø–æ–∂–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫

            switch (choice) {
                case 1:
                    createDroid();
                    break;
                case 2:
                    showDroids();
                    break;
                case 3:
                    startOneVsOneBattle();
                    break;
                case 4:
                    startTeamBattle();
                    break;
                case 5:
                    saveBattleToFile();
                    break;
                case 6:
                    replayBattleFromFile();
                    break;
                case 7:
                    System.out.println("–í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...");
                    return;
                default:
                    System.out.println("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!");
            }
        }
    }

    private static void printMenu() {
        System.out.println("\n" + ColorConsole.PURPLE + "=== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ===" + ColorConsole.RESET);
        System.out.println("1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—Ä–æ—ó–¥–∞");
        System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥—Ä–æ—ó–¥—ñ–≤");
        System.out.println("3. –ë—ñ–π 1 –Ω–∞ 1");
        System.out.println("4. –ö–æ–º–∞–Ω–¥–Ω–∏–π –±—ñ–π");
        System.out.println("5. –ó–±–µ—Ä–µ–≥—Ç–∏ –±—ñ–π —É —Ñ–∞–π–ª");
        System.out.println("6. –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –±—ñ–π —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É");
        System.out.println("7. –í–∏—Ö—ñ–¥");
        System.out.print("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ");
    }

    private static void createDroid() {
        System.out.println("\n" + ColorConsole.BLUE + "=== –°–¢–í–û–†–ï–ù–ù–Ø –î–†–û–á–î–ê ===" + ColorConsole.RESET);
        System.out.println("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥—Ä–æ—ó–¥–∞:");
        System.out.println("1. –®—Ç—É—Ä–º–æ–≤–∏–∫ (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π)");
        System.out.println("2. –¢–∞–Ω–∫ (–±–∞–≥–∞—Ç–æ –∑–¥–æ—Ä–æ–≤'—è, –º–∞–ª–æ —à–∫–æ–¥–∏)");
        System.out.println("3. –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ (–ª—ñ–∫—É—î —Å–æ—é–∑–Ω–∏–∫—ñ–≤)");
        System.out.println("4. –°–Ω–∞–π–ø–µ—Ä (–≤–∏—Å–æ–∫–∞ —à–∫–æ–¥–∞, –º–∞–ª–æ –∑–¥–æ—Ä–æ–≤'—è)");

        int type = scanner.nextInt();
        scanner.nextLine(); // —Å–ø–æ–∂–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫

        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –¥—Ä–æ—ó–¥–∞: ");
        String name = scanner.nextLine();

        Droid droid = null;
        switch (type) {
            case 1:
                droid = new AssaultDroid(name);
                droid.setWeapon(new Blaster());
                break;
            case 2:
                droid = new TankDroid(name);
                droid.setWeapon(new RocketLauncher());
                break;
            case 3:
                droid = new SupportDroid(name);
                droid.setWeapon(new HealingGun());
                break;
            case 4:
                droid = new SniperDroid(name);
                droid.setWeapon(new Blaster());
                break;
            default:
                System.out.println("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–∏–ø –¥—Ä–æ—ó–¥–∞!");
                return;
        }

        droids.add(droid);
        System.out.println(ColorConsole.GREEN + "‚úÖ –î—Ä–æ—ó–¥ " + name + " —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!" + ColorConsole.RESET);
    }

    private static void showDroids() {
        System.out.println("\n" + ColorConsole.BLUE + "=== –°–ü–ò–°–û–ö –î–†–û–á–î–Ü–í ===" + ColorConsole.RESET);
        if (droids.isEmpty()) {
            System.out.println("–î—Ä–æ—ó–¥—ñ–≤ –Ω–µ–º–∞—î!");
            return;
        }

        for (int i = 0; i < droids.size(); i++) {
            System.out.println((i + 1) + ". " + droids.get(i));
        }
    }

    private static void startOneVsOneBattle() {
        if (droids.size() < 2) {
            System.out.println("–ü–æ—Ç—Ä—ñ–±–Ω–æ —è–∫ –º—ñ–Ω—ñ–º—É–º 2 –¥—Ä–æ—ó–¥–∏ –¥–ª—è –±–æ—é!");
            return;
        }

        showDroids();
        System.out.print("–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à–æ–≥–æ –¥—Ä–æ—ó–¥–∞: ");
        int droid1Index = scanner.nextInt() - 1;
        System.out.print("–í–∏–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥–æ–≥–æ –¥—Ä–æ—ó–¥–∞: ");
        int droid2Index = scanner.nextInt() - 1;

        if (droid1Index < 0 || droid1Index >= droids.size() ||
                droid2Index < 0 || droid2Index >= droids.size()) {
            System.out.println("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä –¥—Ä–æ—ó–¥—ñ–≤!");
            return;
        }

        // –í–∏–±—ñ—Ä –∞—Ä–µ–Ω–∏
        Arena arena = arenas.get(new Random().nextInt(arenas.size()));
        arena.applyArenaEffect();

        Battle battle = new OneVsOneBattle(droids.get(droid1Index), droids.get(droid2Index));
        battle.startBattle();
    }

    private static void startTeamBattle() {
        if (droids.size() < 2) {
            System.out.println("–ü–æ—Ç—Ä—ñ–±–Ω–æ —è–∫ –º—ñ–Ω—ñ–º—É–º 2 –¥—Ä–æ—ó–¥–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –±–æ—é!");
            return;
        }

        List<Droid> team1 = new ArrayList<>();
        List<Droid> team2 = new ArrayList<>();

        System.out.println("\n" + ColorConsole.BLUE + "=== –§–û–†–ú–£–í–ê–ù–ù–Ø –ö–û–ú–ê–ù–î ===" + ColorConsole.RESET);
        showDroids();

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ 1
        System.out.println("–í–∏–±–µ—Ä—ñ—Ç—å –¥—Ä–æ—ó–¥—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ 1 (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, 0 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è):");
        while (true) {
            int choice = scanner.nextInt();
            if (choice == 0) break;
            if (choice > 0 && choice <= droids.size()) {
                team1.add(droids.get(choice - 1));
            }
        }

        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ 2
        System.out.println("–í–∏–±–µ—Ä—ñ—Ç—å –¥—Ä–æ—ó–¥—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ 2 (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, 0 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è):");
        while (true) {
            int choice = scanner.nextInt();
            if (choice == 0) break;
            if (choice > 0 && choice <= droids.size()) {
                team2.add(droids.get(choice - 1));
            }
        }

        if (team1.isEmpty() || team2.isEmpty()) {
            System.out.println("–û–±–∏–¥–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ –¥—Ä–æ—ó–¥–∞!");
            return;
        }

        // –í–∏–±—ñ—Ä –∞—Ä–µ–Ω–∏
        Arena arena = arenas.get(new Random().nextInt(arenas.size()));
        arena.applyArenaEffect();

        Battle battle = new TeamBattle(team1, team2);
        battle.startBattle();
    }

    private static void saveBattleToFile() {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ");
        String filename = scanner.nextLine();

        try (PrintWriter writer = new PrintWriter(new FileWriter(filename + ".txt"))) {
            // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–æ—é
            writer.println("–ë–∏—Ç–≤–∞ –¥—Ä–æ—ó–¥—ñ–≤ - –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∑–∞–ø–∏—Å");
            writer.println("–§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó");
            System.out.println(ColorConsole.GREEN + "‚úÖ –ë—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: " + filename + ".txt" + ColorConsole.RESET);
        } catch (IOException e) {
            System.out.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
    }

    private static void replayBattleFromFile() {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: ");
        String filename = scanner.nextLine();

        try (BufferedReader reader = new BufferedReader(new FileReader(filename + ".txt"))) {
            String line;
            System.out.println("\n" + ColorConsole.CYAN + "=== –í–Ü–î–¢–í–û–†–ï–ù–ù–Ø –ë–û–Æ ===" + ColorConsole.RESET);
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
                Thread.sleep(500); // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è
            }
        } catch (IOException | InterruptedException e) {
            System.out.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
    }
}