package battle;

import droid.Droid;
import java.util.List;
import java.util.Random;
import util.ColorConsole;

public class TeamBattle extends Battle {
    private Random random;

    public TeamBattle(List<Droid> team1, List<Droid> team2) {
        super(team1, team2);
        this.random = new Random();
    }

    @Override
    public void startBattle() {
        System.out.println(ColorConsole.PURPLE + "\n‚öîÔ∏è === –ü–û–ß–ê–¢–û–ö –ö–û–ú–ê–ù–î–ù–û–ì–û –ë–û–Æ ===" + ColorConsole.RESET);
        logAction("–ö–æ–º–∞–Ω–¥–Ω–∏–π –±—ñ–π –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –ö–æ–º–∞–Ω–¥–∞ 1 (" + team1.size() + " –¥—Ä–æ—ó–¥—ñ–≤) vs –ö–æ–º–∞–Ω–¥–∞ 2 (" + team2.size() + " –¥—Ä–æ—ó–¥—ñ–≤)");

        int round = 1;
        while (!isBattleOver()) {
            System.out.println(ColorConsole.YELLOW + "\n--- –†–∞—É–Ω–¥ " + round + " ---" + ColorConsole.RESET);

            // –•—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ 1
            if (isTeamAlive(team1)) {
                teamTurn(team1, team2, "–ö–æ–º–∞–Ω–¥–∞ 1");
            }

            // –•—ñ–¥ –∫–æ–º–∞–Ω–¥–∏ 2
            if (isTeamAlive(team2) && !isBattleOver()) {
                teamTurn(team2, team1, "–ö–æ–º–∞–Ω–¥–∞ 2");
            }

            printTeamStatus();
            regenerateEnergy();
            round++;
        }

        declareWinner();
    }

    private void teamTurn(List<Droid> attackingTeam, List<Droid> defendingTeam, String teamName) {
        logAction("\n–•—ñ–¥ " + teamName);

        for (Droid attacker : attackingTeam) {
            if (!attacker.isAlive() || !isTeamAlive(defendingTeam)) continue;

            // –í–∏–±—ñ—Ä —Ü—ñ–ª—ñ - –∞—Ç–∞–∫—É—î–º–æ –Ω–∞–π—Å–ª–∞–±—à–æ–≥–æ –∂–∏–≤–æ–≥–æ –¥—Ä–æ—ó–¥–∞
            Droid target = findWeakestDroid(defendingTeam);
            if (target != null) {
                // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –¥—ñ—ó
                if (random.nextDouble() < 0.7) {
                    attacker.attack(target);
                } else {
                    attacker.useSpecialAbility(target);
                }
            }
        }
    }

    private Droid findWeakestDroid(List<Droid> team) {
        return team.stream()
                .filter(Droid::isAlive)
                .min((d1, d2) -> Integer.compare(d1.getHealth(), d2.getHealth()))
                .orElse(null);
    }

    @Override
    public boolean isBattleOver() {
        return !isTeamAlive(team1) || !isTeamAlive(team2);
    }

    private void declareWinner() {
        List<Droid> winners = isTeamAlive(team1) ? team1 : team2;
        String teamName = isTeamAlive(team1) ? "–ö–æ–º–∞–Ω–¥–∞ 1" : "–ö–æ–º–∞–Ω–¥–∞ 2";

        System.out.println(ColorConsole.GREEN + "\nüéâ –ü–ï–†–ï–ú–û–ñ–ï–¶–¨: " + teamName + "!" + ColorConsole.RESET);
        logAction("–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: " + teamName);

        System.out.println("–î—Ä–æ—ó–¥–∏, —â–æ –≤–∏–∂–∏–ª–∏:");
        winners.stream()
                .filter(Droid::isAlive)
                .forEach(droid -> System.out.println("  " + droid.getName()));
    }
}